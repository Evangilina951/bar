async function addCategory() {
  if (!firebaseApp) {
    alert('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    return;
  }
  const form = document.getElementById('category-form');
  if (!form) {
    console.error('–§–æ—Ä–º–∞ —Å id="category-form" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
    alert('–û—à–∏–±–∫–∞: –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  const db = firebaseApp.firestore();
  const name = document.getElementById('category-name')?.value;
  const isVisible = document.getElementById('category-visible')?.checked || false;
  const number = parseInt(document.getElementById('category-number')?.value) || 0;
  const categoryId = form.dataset.categoryId || null;

  if (!name) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    return;
  }

  try {
    const existingCategories = await db.collection('categories').where('number', '==', number).get();
    if (!existingCategories.empty && (!categoryId || existingCategories.docs.some(doc => doc.id !== categoryId))) {
      alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.');
      return;
    }

    if (categoryId) {
      await db.collection('categories').doc(categoryId).update({ name, isVisible, number });
      loadCategories();
      loadCategoryList();
      cancelCategoryForm();
      alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    } else {
      await db.collection('categories').add({ name, isVisible, number });
      loadCategories();
      loadCategoryList();
      cancelCategoryForm();
      alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
  }
}

function loadCategories() {
  if (!firebaseApp) {
    console.error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    return;
  }
  const select = document.getElementById('dish-category');
  if (!select) return;
  const db = firebaseApp.firestore();
  db.collection('categories').orderBy('number', 'asc').get()
    .then((categories) => {
      if (select) {
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
        categories.forEach((cat) => {
          select.innerHTML += `<option value="${cat.id}">${cat.data().name}</option>`;
        });
      }
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    });
}

function loadCategoryList() {
  if (!firebaseApp) {
    console.error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    return;
  }
  const list = document.getElementById('categories-list');
  if (!list) return;
  const db = firebaseApp.firestore();
  db.collection('categories').orderBy("number", "asc").get()
    .then((categories) => {
      list.innerHTML = `
        <input type="text" id="dish-search" class="border p-2 w-full rounded mb-4" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞">
        <h2 class="text-xl font-bold mb-2">–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h2>
      `;
      if (categories.empty) {
        list.innerHTML += '<li class="text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</li>';
        return;
      }
      categories.forEach((cat) => {
        const catData = cat.data();
        list.innerHTML += `
          <li class="flex items-center justify-between p-2 border-b">
            <span class="cursor-pointer" onclick="toggleCategoryFilter('${cat.id}', '${catData.name}')">${catData.number}. ${catData.name}</span>
            <div class="flex gap-2">
              <button onclick="loadCategoryForEdit('${cat.id}')" class="edit-btn bg-yellow-600 text-white p-2 rounded flex-1">‚úèÔ∏è</button>
              <button onclick="deleteCategory('${cat.id}')" class="delete-btn bg-red-600 text-white p-2 rounded flex-1">üóëÔ∏è</button>
              <button onclick="toggleCategoryVisibility('${cat.id}', ${!catData.isVisible})" class="${catData.isVisible ? 'toggle-active-btn bg-green-600' : 'toggle-inactive-btn bg-gray-600'} text-white p-2 rounded flex-1">${catData.isVisible ? '‚úîÔ∏è' : '‚ùå'}</button>
            </div>
          </li>`;
      });
      const searchInput = document.getElementById('dish-search');
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          searchQuery = e.target.value;
          loadDishes();
        });
      }
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      if (error.code === 'failed-precondition' && error.message.includes('requires an index')) {
        alert('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å –≤ Firestore. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ Firebase.');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + error.message);
      }
    });
}

function toggleCategoryFilter(categoryId, categoryName) {
  currentCategoryFilter = currentCategoryFilter === categoryId ? null : categoryId;
  showAllDishes = false;
  loadDishes();
}

function loadCategoryForEdit(categoryId) {
  if (!firebaseApp) {
    alert('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    return;
  }
  const form = document.getElementById('category-form');
  if (!form) {
    console.error('–§–æ—Ä–º–∞ —Å id="category-form" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
    alert('–û—à–∏–±–∫–∞: –§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  const db = firebaseApp.firestore();
  db.collection('categories').doc(categoryId).get()
    .then((category) => {
      if (!category.exists) {
        alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      const catData = category.data();
      document.getElementById('category-name').value = catData.name || '';
      document.getElementById('category-number').value = catData.number || 0;
      document.getElementById('category-visible').checked = catData.isVisible || false;
      form.dataset.categoryId = categoryId;
      document.getElementById('category-form-button').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      form.classList.remove('hidden');
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
    });
}

function deleteCategory(categoryId) {
  if (!firebaseApp) {
    alert('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    return;
  }
  const db = firebaseApp.firestore();
  db.collection('dishes').where('category_id', '==', categoryId).get()
    .then((dishes) => {
      if (!dishes.empty) {
        alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–π –µ—Å—Ç—å –±–ª—é–¥–∞.');
        return;
      }
      db.collection('categories').doc(categoryId).delete()
        .then(() => {
          loadCategories();
          loadCategoryList();
          alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
        })
        .catch((error) => {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
        });
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª—é–¥:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª—é–¥: ' + error.message);
    });
}

function toggleCategoryVisibility(categoryId, isVisible) {
  if (!firebaseApp) {
    alert('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    return;
  }
  const db = firebaseApp.firestore();
  db.collection('categories').doc(categoryId).update({ isVisible })
    .then(() => {
      loadCategoryList();
      loadDishes();
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
    });
}

window.addCategory = addCategory;
window.loadCategories = loadCategories;
window.loadCategoryList = loadCategoryList;
window.toggleCategoryFilter = toggleCategoryFilter;
window.loadCategoryForEdit = loadCategoryForEdit;
window.deleteCategory = deleteCategory;
window.toggleCategoryVisibility = toggleCategoryVisibility;
